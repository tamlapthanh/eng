// auth.js

const AuthService = {
  API_BASE_URL: global_const.RUN_URL_SERVER,

  setToken(token, { persist = false } = {}) {
    if (persist) localStorage.setItem("jwt_token", token);
    else sessionStorage.setItem("jwt_token", token);
  },
  getToken() {
    return sessionStorage.getItem("jwt_token") || localStorage.getItem("jwt_token");
  },

  // L∆∞u token v√†o localStorage
  // setToken(token) {
  //   localStorage.setItem("jwt_token", token);
  // },

  // // L·∫•y token
  // getToken() {
  //   return localStorage.getItem("jwt_token");
  // },

  // X√≥a token (logout)
  removeToken() {
    localStorage.removeItem("jwt_token");
  },

  // Ki·ªÉm tra ƒë√£ login ch∆∞a
  isAuthenticated() {
    const token = this.getToken();
    if (!token) return false;

    // Ki·ªÉm tra token c√≥ h·∫øt h·∫°n kh√¥ng
    try {
      const payload = JSON.parse(atob(token.split(".")[1]));
      const exp = payload.exp * 1000; // convert to milliseconds
      return Date.now() < exp;
    } catch (e) {
      return false;
    }
  },

  // Login
  // AuthService.login (c·∫≠p nh·∫≠t)
  async login(email, password) {
    const controller = new AbortController();
    const timeoutMs = 10000; // 10s timeout
    const timeout = setTimeout(() => controller.abort(), timeoutMs);

    try {
      const response = await fetch(`${this.API_BASE_URL}/auth/login`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ email, password }),
        signal: controller.signal,
        // with credentials? n·∫øu backend d√πng cookie, th√™m:
        // credentials: 'include'
      });

      clearTimeout(timeout);

      // N·∫øu fetch th√†nh c√¥ng (c√≥ response), nh∆∞ng status kh√¥ng ok
      if (!response.ok) {
        // N·∫øu server tr·∫£ body JSON m√¥ t·∫£ l·ªói, th·ª≠ parse
        let errBody = null;
        try {
          errBody = await response.json();
        } catch (e) {
          /* ignore */
        }

        if (response.status === 401 || response.status === 403) {
          return {
            success: false,
            type: "invalid_credentials",
            status: response.status,
            message: errBody?.message || "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng",
          };
        }

        if (response.status === 400) {
          return {
            success: false,
            type: "validation_error",
            status: response.status,
            message: errBody?.message || "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá",
          };
        }

        if (response.status >= 500) {
          return {
            success: false,
            type: "server_error",
            status: response.status,
            message: errBody?.message || "L·ªói m√°y ch·ªß, th·ª≠ l·∫°i sau",
          };
        }

        // fallback cho status kh√°c
        return {
          success: false,
          type: "server_error",
          status: response.status,
          message:
            errBody?.message ||
            `L·ªói: ${response.status} ${response.statusText}`,
        };
      }

      // OK => parse JSON v√† l∆∞u token
      const data = await response.json();
      if (data.token) {
        this.setToken(data.token);
        return { success: true };
      } else {
        // server tr·∫£ 200 nh∆∞ng kh√¥ng c√≥ token
        return {
          success: false,
          type: "server_error",
          message: "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c token t·ª´ server",
        };
      }
    } catch (err) {
      clearTimeout(timeout);
      // fetch s·∫Ω n√©m TypeError cho network/CORS, AbortError cho timeout
      if (err.name === "AbortError") {
        return {
          success: false,
          type: "timeout",
          message: "Server kh√¥ng ph·∫£n h·ªìi (timeout)",
        };
      }
      // NOTE: CORS preflight blocked th∆∞·ªùng cho ra TypeError v·ªõi message 'Failed to fetch'
      return {
        success: false,
        type: "network",
        message: err.message || "L·ªói k·∫øt n·ªëi m·∫°ng ho·∫∑c CORS",
      };
    }
  },
  // Logout
  logout() {
    this.removeToken();
    window.location.href = "login.html";
  },

  // Redirect to login n·∫øu ch∆∞a authenticate
  requireAuth() {
    if (!this.isAuthenticated()) {
      window.location.href = "login.html";
    }
  },

  // Th√™m Authorization header v√†o fetch request
  getAuthHeaders() {
    const token = this.getToken();
    return {
      "Content-Type": "application/json",
      Authorization: token ? `Bearer ${token}` : "",
    };
  },
};

// Login form handler (ch·ªâ ch·∫°y tr√™n trang login)
$(document).ready(function () {
  if ($("#loginForm").length) {
    $("#loginForm").on("submit", async function (e) {
      e.preventDefault();

      const email = $("#email").val();
      const password = $("#password").val();
      const errorMsg = $("#errorMessage");

      errorMsg.addClass("d-none");

      // üåÄ Hi·ªán spinner
      showSpinner("spinnerOverlay", "#F54927");


    try {
        const result = await AuthService.login(email, password);

        if (result.success) {
          // hide tr∆∞·ªõc khi chuy·ªÉn trang ƒë·ªÉ tr√°nh flash overlay          
          hideSpinner();
          window.location.href = 'index.html';
          return;
        }

        // n·∫øu kh√¥ng th√†nh c√¥ng, hi·ªán l·ªói
        errorMsg.removeClass('d-none');
        switch (result.type) {
          case 'invalid_credentials':
            errorMsg.text('Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng. Vui l√≤ng ki·ªÉm tra.');
            break;
          case 'validation_error':
            errorMsg.text(result.message || 'D·ªØ li·ªáu nh·∫≠p kh√¥ng h·ª£p l·ªá.');
            break;
          case 'timeout':
            errorMsg.text('M√°y ch·ªß kh√¥ng ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau.');
            break;
          case 'network':
            errorMsg.text('Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server. Ki·ªÉm tra k·∫øt n·ªëi ho·∫∑c CORS.');
            console.error('Network/CORS error:', result.message);
            break;
          case 'server_error':
          default:
            errorMsg.text(result.message || 'L·ªói m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.');
            console.error('Server error:', result);
            break;
        }
      } catch (ex) {
        console.error('Unexpected error during login', ex);
        $('#errorMessage').removeClass('d-none').text('L·ªói kh√¥ng x√°c ƒë·ªãnh. Vui l√≤ng th·ª≠ l·∫°i.');
      } finally {
        // lu√¥n ·∫©n overlay ·ªü cu·ªëi
        hideSpinner();
      }

    });
  }
});
